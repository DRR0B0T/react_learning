{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Loader.js","Modal/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","TodoList","props","todos","map","onToggle","Modal","state","isOpen","Fragment","setState","this","Component","AddTodo","lazy","Promise","resolve","setTimeout","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","Loader","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63b0a091.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, { useContext } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from '../context'\r\n\r\nconst styles = {\r\n    li: {\r\n       display: 'flex',\r\n       justifyContent:  'space-between',\r\n        alignItems: 'center',\r\n        padding:'.5rem 1 rem',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '4px',\r\n        marginBottom: '.5rem'\r\n    },\r\n    input: {\r\n        marginRight: '1rem'\r\n    }\r\n}\r\n\r\n\r\nfunction TodoItem({todo, index, onChange}) {\r\n    const { removeTodo } = useContext(Context)\r\n    const classes = []\r\n\r\n    if(todo.completed) {\r\n        classes.push('done')\r\n    }\r\n    return <li style={styles.li}>\r\n        <span className={classes.join(' ')}>\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={todo.completed}\r\n                style={styles.input}\r\n                onChange={()=>onChange(todo.id)}/>\r\n\r\n        <strong>{index + 1}</strong>\r\n            &nbsp;\r\n        {todo.title}\r\n        </span>\r\n        <button className='rm' onClick={removeTodo.bind(null, todo.id)}>&times;</button>\r\n    </li>\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoItem","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst styles = {\r\n    ul: {\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\n\r\n function TodoList(props) {\r\n    return (\r\n        <ul style={styles.ul}>\r\n            { props.todos.map((todo, index) => {\r\n                return <TodoItem\r\n                    todo={todo}\r\n                    key={todo.id}\r\n                    index={index}\r\n                    onChange={props.onToggle}/>\r\n            }) }\r\n\r\n        </ul>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList","import React from 'react'\r\n\r\nexport default () => <div style={{display: 'flex', justifyContent: 'center', margin: '.5rem'}}>\r\n    <div className=\"lds-ripple\">\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n                    </div>\r\n\r\n","import React from 'react'\r\nimport './Modal.css'\r\n\r\nexport default class Modal extends React.Component {\r\n    state = {\r\n        isOpen: false\r\n    }\r\n\r\n    render() {\r\n        return (<React.Fragment>\r\n            <button onClick={() => this.setState({isOpen:true})}>\r\n                Open\r\n            </button>\r\n\r\n            {this.state.isOpen && (<div className=\"modal\">\r\n                <div className=\"modal-body\">\r\n                    <h1>Modal Title</h1>\r\n                    <p>Awesome Modal</p>\r\n                    <button onClick={() => this.setState({isOpen:false})}>Close</button>\r\n                </div>\r\n            </div>)}\r\n        </React.Fragment>)\r\n    }\r\n}\r\n","import React, { useEffect } from \"react\";\nimport TodoList from \"./Todo/TodoList\";\nimport Context from \"./context\";\nimport Loader from \"./Loader\";\nimport Modal from \"./Modal/Modal\";\n\nconst AddTodo = React.lazy(() => new Promise(resolve => {\n    setTimeout(() => {\n        resolve(import('./Todo/AddTodo'))\n    },3000)\n    })\n)\n\n\nfunction App() {\n    const [todos, setTodos] = React.useState([])\n    const [loading, setLoading] = React.useState(true)\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n            .then(response => response.json())\n            .then(todos => {\n                setTimeout(() => {\n                    setTodos(todos)\n                    setLoading(false)\n                },1000)\n            })\n    }, [])\n\n\n    function toggleTodo(id) {\n        setTodos (\n            todos.map(todo => {\n            if(todo.id === id){\n                todo.completed = !todo.completed\n            }\n            return todo\n        }))\n    }\n\n    function removeTodo(id) {\n        setTodos(todos.filter(todo => todo.id !== id))\n    }\n\n    function addTodo(title) {\n        setTodos(todos.concat([{\n            title,\n            id: Date.now(),\n            completed: false\n        }]))\n    }\n\n  return (\n      <Context.Provider value={{removeTodo}}>\n          <div className=\"wrapper\">\n              <h1>React</h1>\n              <Modal />\n\n              <React.Suspense fallback={<p>Loading...</p>}>\n                  <AddTodo onCreate={addTodo}/>\n              </React.Suspense>\n\n\n              {loading && <Loader />}\n\n              {todos.length\n              ? (<TodoList todos={todos} onToggle={toggleTodo} />)\n              : (loading ? null\n                          : <p>No todos</p>\n                  )}\n\n\n          </div>\n      </Context.Provider>\n  )\n\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}